// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
    url    = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())  
  fullname   String
  clerkId    String   @unique
  type       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  stripeId   String?
  billings   Billings[]
  campaigns Campaign[]
  domains Domain[]
  subscription Subscription?
}

model Billings {
  id         String   @id @default(uuid()) 
  plan       Plans
  credits    Int
  userId     String   
  user       User    @relation(fields: [userId], references: [id])
}

enum Plans {
  STANDARD
  PRO
  ULTIMATE
}

model Campaign {
  id        String @id @default(uuid())
  name      String
  customers String[]
  userId    String
  createdAt DateTime @default(now())
  user      User    @relation(fields: [userId], references: [id])
  domain    Domain?   
}

model Domain {
  id      String @id @default(uuid())
  name    String @unique
  icon    String
  userId  String
  campaignId  String @unique
  user      User    @relation(fields: [userId], references: [id])
  campaign  Campaign @relation(fields: [campaignId], references: [id])
  helpdesks HelpDesk[]
  chatbots Chatbot[]
  filterquestions FilterQuestions[]
  customers Customer[]
  products Product[]
  bookings Bookings?
}

model HelpDesk {
  id      String @id @default(uuid())
  question  String
  answer    String
  domainId  String
  domain Domain @relation(fields: [domainId], references: [id])
}

model Chatbot{
  id      String @id @default(uuid())
  welcomeMessage    String
  icon    String
  background String
  textColor String
  helpdesk  String
  domainId  String
  domain Domain @relation(fields: [domainId], references: [id])
}

model FilterQuestions{
  id       String      @id @default(uuid())
  name     String
  question String 
  answered String
  domainId String
  domain Domain @relation(fields: [domainId], references: [id])
}

model Product {
  id String @id @default(uuid())
  name String
  price Int
  description String
  createdAt DateTime
  domainId String
  domain Domain @relation(fields: [domainId], references: [id])
}

model Customer{
  id       String      @id @default(uuid())
  email    String
  domainId String
  domain Domain @relation(fields: [domainId], references: [id])
  customerresponces CustomerResponces[]
  chatrooms Chatroom[]
  bookings Bookings[]
}

model CustomerResponces {
  id         String @id @default(uuid())
  question   String
  answered   String
  customerId String 
  customer Customer @relation(fields: [customerId], references: [id])
}

model Chatroom {
  id String @id @default(uuid())
  live Boolean
  mailed Boolean
  createdAt DateTime
  updatedAt DateTime
  customerId String
  customer Customer @relation(fields: [customerId], references: [id])
  chatmessage ChatMessage[]
}

model Bookings {
  id String @id @default(uuid())
  date DateTime
  slot String
  email String
  customerId String
  customer Customer @relation(fields: [customerId], references: [id])
  domainId String @unique
  domain Domain @relation(fields: [domainId], references: [id])
  createdAt DateTime
}

model ChatMessage{
  id      String @id @default(uuid())
  message String
  role  Role
  createdAt DateTime @default(now())
  updatedAt DateTime
  chatRoomId  String
  seen Boolean
  chatroom Chatroom @relation(fields: [chatRoomId], references: [id])
}

enum Role {
  Admin
  user
  }

model Subscription {
  id        String   @id @default(uuid())
  userId    String   @unique
  plan      String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  maxStorage  Int 
}






